package com.ayantsoft.expm.hibernate.pojo;
// Generated 10 Jun, 2017 2:20:04 PM by Hibernate Tools 4.3.5.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Expense generated by hbm2java
 */
@Entity
@Table(name = "expense", catalog = "expm")
public class Expense implements java.io.Serializable {

	private Integer expenseId;
	private Account account;
	private User userByCancelBy;
	private User userByEntryBy;
	private User userByApprovedBy;
	private Vendor vendor;
	private String invoiceNo;
	private Date invoiceDate;
	private String description;
	private BigDecimal serviceTax;
	private BigDecimal totalAmount;
	private BigDecimal tdsAmount;
	private BigDecimal netAmount;
	private String paymentStatus;
	private Date entryDate;
	private Boolean isCancel;
	private String reasonForCancel;
	private Date cancelDate;
	private Boolean isApproved;
	private Date approvedDate;
	private String expenseType;
	private BigDecimal expenseDue;
	private Set<PaymentDetail> paymentDetails = new HashSet<PaymentDetail>(0);
	private Set<ExpenseDocuments> expenseDocumentses = new HashSet<ExpenseDocuments>(0);

	public Expense() {
	}

	public Expense(Account account, User userByEntryBy, Vendor vendor, Date invoiceDate, String description,
			BigDecimal totalAmount, BigDecimal netAmount, String paymentStatus, Date entryDate) {
		this.account = account;
		this.userByEntryBy = userByEntryBy;
		this.vendor = vendor;
		this.invoiceDate = invoiceDate;
		this.description = description;
		this.totalAmount = totalAmount;
		this.netAmount = netAmount;
		this.paymentStatus = paymentStatus;
		this.entryDate = entryDate;
	}

	public Expense(Account account, User userByCancelBy, User userByEntryBy, User userByApprovedBy, Vendor vendor,
			String invoiceNo, Date invoiceDate, String description, BigDecimal serviceTax, BigDecimal totalAmount,
			BigDecimal tdsAmount, BigDecimal netAmount, String paymentStatus, Date entryDate, Boolean isCancel,
			String reasonForCancel, Date cancelDate, Boolean isApproved, Date approvedDate, String expenseType,
			BigDecimal expenseDue, Set<PaymentDetail> paymentDetails, Set<ExpenseDocuments> expenseDocumentses) {
		this.account = account;
		this.userByCancelBy = userByCancelBy;
		this.userByEntryBy = userByEntryBy;
		this.userByApprovedBy = userByApprovedBy;
		this.vendor = vendor;
		this.invoiceNo = invoiceNo;
		this.invoiceDate = invoiceDate;
		this.description = description;
		this.serviceTax = serviceTax;
		this.totalAmount = totalAmount;
		this.tdsAmount = tdsAmount;
		this.netAmount = netAmount;
		this.paymentStatus = paymentStatus;
		this.entryDate = entryDate;
		this.isCancel = isCancel;
		this.reasonForCancel = reasonForCancel;
		this.cancelDate = cancelDate;
		this.isApproved = isApproved;
		this.approvedDate = approvedDate;
		this.expenseType = expenseType;
		this.expenseDue = expenseDue;
		this.paymentDetails = paymentDetails;
		this.expenseDocumentses = expenseDocumentses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "expense_id", unique = true, nullable = false)
	public Integer getExpenseId() {
		return this.expenseId;
	}

	public void setExpenseId(Integer expenseId) {
		this.expenseId = expenseId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "account_id", nullable = false)
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cancel_by")
	public User getUserByCancelBy() {
		return this.userByCancelBy;
	}

	public void setUserByCancelBy(User userByCancelBy) {
		this.userByCancelBy = userByCancelBy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "entry_by", nullable = false)
	public User getUserByEntryBy() {
		return this.userByEntryBy;
	}

	public void setUserByEntryBy(User userByEntryBy) {
		this.userByEntryBy = userByEntryBy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "approved_by")
	public User getUserByApprovedBy() {
		return this.userByApprovedBy;
	}

	public void setUserByApprovedBy(User userByApprovedBy) {
		this.userByApprovedBy = userByApprovedBy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "vender_id", nullable = false)
	public Vendor getVendor() {
		return this.vendor;
	}

	public void setVendor(Vendor vendor) {
		this.vendor = vendor;
	}

	@Column(name = "invoice_no", length = 45)
	public String getInvoiceNo() {
		return this.invoiceNo;
	}

	public void setInvoiceNo(String invoiceNo) {
		this.invoiceNo = invoiceNo;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "invoice_date", nullable = false, length = 10)
	public Date getInvoiceDate() {
		return this.invoiceDate;
	}

	public void setInvoiceDate(Date invoiceDate) {
		this.invoiceDate = invoiceDate;
	}

	@Column(name = "description", nullable = false, length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "service_tax", precision = 10)
	public BigDecimal getServiceTax() {
		return this.serviceTax;
	}

	public void setServiceTax(BigDecimal serviceTax) {
		this.serviceTax = serviceTax;
	}

	@Column(name = "total_amount", nullable = false, precision = 10)
	public BigDecimal getTotalAmount() {
		return this.totalAmount;
	}

	public void setTotalAmount(BigDecimal totalAmount) {
		this.totalAmount = totalAmount;
	}

	@Column(name = "tds_amount", precision = 10)
	public BigDecimal getTdsAmount() {
		return this.tdsAmount;
	}

	public void setTdsAmount(BigDecimal tdsAmount) {
		this.tdsAmount = tdsAmount;
	}

	@Column(name = "net_amount", nullable = false, precision = 10)
	public BigDecimal getNetAmount() {
		return this.netAmount;
	}

	public void setNetAmount(BigDecimal netAmount) {
		this.netAmount = netAmount;
	}

	@Column(name = "payment_status", nullable = false, length = 14)
	public String getPaymentStatus() {
		return this.paymentStatus;
	}

	public void setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "entry_date", nullable = false, length = 10)
	public Date getEntryDate() {
		return this.entryDate;
	}

	public void setEntryDate(Date entryDate) {
		this.entryDate = entryDate;
	}

	@Column(name = "is_cancel")
	public Boolean getIsCancel() {
		return this.isCancel;
	}

	public void setIsCancel(Boolean isCancel) {
		this.isCancel = isCancel;
	}

	@Column(name = "reason_for_cancel", length = 145)
	public String getReasonForCancel() {
		return this.reasonForCancel;
	}

	public void setReasonForCancel(String reasonForCancel) {
		this.reasonForCancel = reasonForCancel;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "cancel_date", length = 10)
	public Date getCancelDate() {
		return this.cancelDate;
	}

	public void setCancelDate(Date cancelDate) {
		this.cancelDate = cancelDate;
	}

	@Column(name = "is_approved")
	public Boolean getIsApproved() {
		return this.isApproved;
	}

	public void setIsApproved(Boolean isApproved) {
		this.isApproved = isApproved;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "approved_date", length = 10)
	public Date getApprovedDate() {
		return this.approvedDate;
	}

	public void setApprovedDate(Date approvedDate) {
		this.approvedDate = approvedDate;
	}

	@Column(name = "expense_type", length = 9)
	public String getExpenseType() {
		return this.expenseType;
	}

	public void setExpenseType(String expenseType) {
		this.expenseType = expenseType;
	}

	@Column(name = "expense_due", precision = 10)
	public BigDecimal getExpenseDue() {
		return this.expenseDue;
	}

	public void setExpenseDue(BigDecimal expenseDue) {
		this.expenseDue = expenseDue;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expense")
	public Set<PaymentDetail> getPaymentDetails() {
		return this.paymentDetails;
	}

	public void setPaymentDetails(Set<PaymentDetail> paymentDetails) {
		this.paymentDetails = paymentDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expense")
	public Set<ExpenseDocuments> getExpenseDocumentses() {
		return this.expenseDocumentses;
	}

	public void setExpenseDocumentses(Set<ExpenseDocuments> expenseDocumentses) {
		this.expenseDocumentses = expenseDocumentses;
	}

}
