package com.ayantsoft.expm.hibernate.pojo;
// Generated 10 Jun, 2017 2:20:04 PM by Hibernate Tools 4.3.5.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "expm", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable {

	private Integer userId;
	private String username;
	private String password;
	private String email;
	private String mobile;
	private String name;
	private Set<CashBook> cashBooks = new HashSet<CashBook>(0);
	private Set<Expense> expensesForCancelBy = new HashSet<Expense>(0);
	private Set<Expense> expensesForEntryBy = new HashSet<Expense>(0);
	private Set<Expense> expensesForApprovedBy = new HashSet<Expense>(0);
	private Set<NeftBook> neftBooksForNeftBy = new HashSet<NeftBook>(0);
	private Set<NeftBook> neftBooksForEntryBy = new HashSet<NeftBook>(0);
	private Set<Role> roles = new HashSet<Role>(0);
	private Set<PaymentDetail> paymentDetailsForCancelBy = new HashSet<PaymentDetail>(0);
	private Set<ChequeBook> chequeBooks = new HashSet<ChequeBook>(0);
	private Set<CardBook> cardBooks = new HashSet<CardBook>(0);
	private Set<PaymentDetail> paymentDetailsForEnrtyBy = new HashSet<PaymentDetail>(0);

	public User() {
	}

	public User(String username, String password, String email, String mobile, String name, Set<CashBook> cashBooks,
			Set<Expense> expensesForCancelBy, Set<Expense> expensesForEntryBy, Set<Expense> expensesForApprovedBy,
			Set<NeftBook> neftBooksForNeftBy, Set<NeftBook> neftBooksForEntryBy, Set<Role> roles,
			Set<PaymentDetail> paymentDetailsForCancelBy, Set<ChequeBook> chequeBooks, Set<CardBook> cardBooks,
			Set<PaymentDetail> paymentDetailsForEnrtyBy) {
		this.username = username;
		this.password = password;
		this.email = email;
		this.mobile = mobile;
		this.name = name;
		this.cashBooks = cashBooks;
		this.expensesForCancelBy = expensesForCancelBy;
		this.expensesForEntryBy = expensesForEntryBy;
		this.expensesForApprovedBy = expensesForApprovedBy;
		this.neftBooksForNeftBy = neftBooksForNeftBy;
		this.neftBooksForEntryBy = neftBooksForEntryBy;
		this.roles = roles;
		this.paymentDetailsForCancelBy = paymentDetailsForCancelBy;
		this.chequeBooks = chequeBooks;
		this.cardBooks = cardBooks;
		this.paymentDetailsForEnrtyBy = paymentDetailsForEnrtyBy;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "username", unique = true, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "email", length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "mobile", length = 45)
	public String getMobile() {
		return this.mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<CashBook> getCashBooks() {
		return this.cashBooks;
	}

	public void setCashBooks(Set<CashBook> cashBooks) {
		this.cashBooks = cashBooks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCancelBy")
	public Set<Expense> getExpensesForCancelBy() {
		return this.expensesForCancelBy;
	}

	public void setExpensesForCancelBy(Set<Expense> expensesForCancelBy) {
		this.expensesForCancelBy = expensesForCancelBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEntryBy")
	public Set<Expense> getExpensesForEntryBy() {
		return this.expensesForEntryBy;
	}

	public void setExpensesForEntryBy(Set<Expense> expensesForEntryBy) {
		this.expensesForEntryBy = expensesForEntryBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByApprovedBy")
	public Set<Expense> getExpensesForApprovedBy() {
		return this.expensesForApprovedBy;
	}

	public void setExpensesForApprovedBy(Set<Expense> expensesForApprovedBy) {
		this.expensesForApprovedBy = expensesForApprovedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByNeftBy")
	public Set<NeftBook> getNeftBooksForNeftBy() {
		return this.neftBooksForNeftBy;
	}

	public void setNeftBooksForNeftBy(Set<NeftBook> neftBooksForNeftBy) {
		this.neftBooksForNeftBy = neftBooksForNeftBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEntryBy")
	public Set<NeftBook> getNeftBooksForEntryBy() {
		return this.neftBooksForEntryBy;
	}

	public void setNeftBooksForEntryBy(Set<NeftBook> neftBooksForEntryBy) {
		this.neftBooksForEntryBy = neftBooksForEntryBy;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_has_role", catalog = "expm", joinColumns = {
			@JoinColumn(name = "user_user_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "role_role_id", nullable = false, updatable = false) })
	public Set<Role> getRoles() {
		return this.roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCancelBy")
	public Set<PaymentDetail> getPaymentDetailsForCancelBy() {
		return this.paymentDetailsForCancelBy;
	}

	public void setPaymentDetailsForCancelBy(Set<PaymentDetail> paymentDetailsForCancelBy) {
		this.paymentDetailsForCancelBy = paymentDetailsForCancelBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<ChequeBook> getChequeBooks() {
		return this.chequeBooks;
	}

	public void setChequeBooks(Set<ChequeBook> chequeBooks) {
		this.chequeBooks = chequeBooks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<CardBook> getCardBooks() {
		return this.cardBooks;
	}

	public void setCardBooks(Set<CardBook> cardBooks) {
		this.cardBooks = cardBooks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEnrtyBy")
	public Set<PaymentDetail> getPaymentDetailsForEnrtyBy() {
		return this.paymentDetailsForEnrtyBy;
	}

	public void setPaymentDetailsForEnrtyBy(Set<PaymentDetail> paymentDetailsForEnrtyBy) {
		this.paymentDetailsForEnrtyBy = paymentDetailsForEnrtyBy;
	}

}
